<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>changed</key>
	<dict>
		<key>command</key>
		<string>#!/usr/bin/env ruby18

require ENV["TM_SUPPORT_PATH"] + "/lib/tm/executor"
require ENV["TM_SUPPORT_PATH"] + "/lib/tm/save_current_document"

TextMate.save_current_document
TextMate::Executor.make_project_master_current_document

error_fd = nil
document = File.read(ENV["TM_FILEPATH"])
osascript_bin = ENV["TM_OSASCRIPT"] || "osascript"
puts "Runnning #{osascript_bin}"
TextMate::Executor.run(osascript_bin, "-l", "JavaScript", "-ss", ENV["TM_FILEPATH"], :create_error_pipe =&gt; true, :version_args =&gt; ["-e", "\"AppleScript \" &amp; (AppleScript's version as string)"]) do |str, type|
  error_fd ||= IO.for_fd(ENV["TM_ERROR_FD"].to_i)
  case type
  when :err
    if str =~ /^([^\:]+):(\d+):(\d+): (.*?): (.*) \((-?\d+)\)$/ then
      filepath, start,  stop, err, msg, status = $1, $2.to_i, $3.to_i, $4, $5, $6

      err = err.gsub(/\b\w(?=\w{3,})/) { |m| m.upcase }

      error_fd &lt;&lt; "&lt;div id=\"exception_report\" class=\"framed\"&gt;\n"
      error_fd &lt;&lt; "&lt;p id=\"exception\"&gt;&lt;strong&gt;#{htmlize err}&lt;/strong&gt;: #{htmlize msg}&lt;/p&gt;\n"

      from = document[0..start].rindex(/^/)
      to = start + document[start..-1].index(/$/)
      src =  document[from...to]

      line = document[0...start].count("\n") + 1
      column = start - from

      link = "txmt://open?line=#{line}&amp;column=#{column}"
      error_fd &lt;&lt; "&lt;pre&gt;#{src}\n"
      error_fd &lt;&lt; "#{' ' * (column)}â†‘&lt;/pre&gt;"
      error_fd &lt;&lt;  "&lt;blockquote&gt;&lt;a href=\"#{link}\"&gt;line #{line}, column #{column}&lt;/a&gt; in #{ENV['TM_DISPLAYNAME']}\n"

      error_fd &lt;&lt; "&lt;p&gt;Error #{status}.&lt;/p&gt;\n"
      error_fd &lt;&lt; "&lt;/div&gt;\n"

      error_fd.flush
      ""
    else
      "&lt;span class=\"err\" style=\"color:red;\"&gt;#{htmlize(str)}&lt;/span&gt;&lt;br/&gt;"
    end
  when :out
    htmlize(str)
  end
end
</string>
		<key>scope</key>
		<string>source.javascript.jxa</string>
	</dict>
	<key>isDelta</key>
	<true/>
	<key>uuid</key>
	<string>28D28F3B-C59B-4387-A67E-65CFF1CBC62B</string>
</dict>
</plist>
